/*
 * ZMK Keymap Configuration
 * 
 * This file defines the keyboard behavior including layers, key bindings,
 * combos, macros, and special behaviors.
 * 
 * Layer definitions:
 * DEFAULT (0): Main typing layer
 * GAME (1): Optimized for gaming
 * SIMPLE (2): Simplified layout
 * MEDIA (3): Media controls and Bluetooth
 * NUMBER (4): Number pad and navigation
 * SYMBOL (5): Special symbols and characters
 * SNIPE (6): Mouse movement precision controls
 * SCROLL (7): Scrolling and navigation
 * FNCT (8): Function keys
 * LAYERS (9): Layer switching shortcuts
 */

// Layer definitions for easier reference
#define DEFAULT 0
#define GAME    1
#define SIMPLE  2
#define MEDIA   3
#define NUMBER  4
#define SYMBOL  5
#define SNIPE   6
#define SCROLL  7
#define FNCT    8
#define LAYERS  9

// Include necessary behavior definitions
#include <behaviors/mouse_keys.dtsi>  // Mouse movement functionality
#include <dt-bindings/zmk/mouse.h>    // Mouse key bindings
#include <behaviors.dtsi>             // Core behaviors
#include <dt-bindings/zmk/bt.h>       // Bluetooth controls
#include <dt-bindings/zmk/keys.h>     // Standard key definitions
#include <dt-bindings/zmk/outputs.h>  // Output switching (USB/BLE)

/* 
 * Layer-Tap Configuration
 * Controls how the dual-function layer-tap keys behave
 * tapping-term-ms: time window to decide between tap and hold
 * flavor: how ZMK decides between a tap and hold action
 * quick-tap-ms: enables quick tap behavior
 */
&lt {
    tapping-term-ms = <100>;
    flavor = "balanced";
    quick-tap-ms = <180>;
};

/* 
 * Mod-Tap Configuration
 * Controls how the dual-function modifier-tap keys behave
 * tapping-term-ms: time window to decide between tap and hold
 * flavor: how ZMK decides between a tap and hold action
 * quick-tap-ms: enables quick tap behavior
 */
&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <180>;
};

/* 
 * Sticky Key Configuration
 * Controls how sticky/one-shot modifiers behave
 * quick-release: releases the sticky key when another key is pressed
 * release-after-ms: automatically releases after this time
 */
&sk {
    quick-release;
    release-after-ms = <2000>;
};

// Configure caps_word to continue when typing underscores or dashes
&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    behaviors {
        /* 
         * Special dash behavior
         * Allows for different actions on tap vs hold
         */
        sdash: special_dash {
            compatible = "zmk,behavior-hold-tap";
            label = "SDASH";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <100>;
            quick-tap-ms = <180>;
            bindings = <&kp>, <&kp>;
        };

        /* 
         * Special middle click behavior
         * Allows for layer activation on hold, middle click on tap
         */
        xmclk: special_middle_click {
            compatible = "zmk,behavior-hold-tap";
            label = "XMCLK";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <100>;
            quick-tap-ms = <180>;
            bindings = <&mo>, <&mkp>;
        };

        /* 
         * Globe key tap dance
         * Multiple actions based on tap count:
         * 1 tap: Globe key
         * 2 taps: Cmd+H
         * 3 taps: Cmd+Tab
         * 4 taps: Cmd+X
         */
        td_globe: tap_dance_globe {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GLOBE";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp GLOBE>, <&kp LG(H)>, <&kp LG(TAB)>, <&kp LG(X)>;
        };

        /* 
         * Special paste behavior
         * Allows for different paste actions on tap vs hold
         */
        xpaste: special_paste {
            compatible = "zmk,behavior-hold-tap";
            label = "X_PASTE";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            bindings = <&spaste>, <&kp>;
        };

        /* 
         * Special copy behavior
         * Allows for different copy actions on tap vs hold
         */
        xcopy: special_copy {
            compatible = "zmk,behavior-hold-tap";
            label = "X_COPY";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            bindings = <&kp>, <&kp>;
        };

        /* 
         * Paste tap dance
         * 1 tap: Ctrl+V (standard paste)
         * 2 taps: Cmd+Shift+V (paste without formatting)
         */
        td_paste: tap_dance_paste {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PASTE";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&xpaste 0 LC(V)>, <&kp LG(LS(V))>;
        };

        /* 
         * Cut/Copy tap dance
         * Combines cut and copy into a single key
         * Hold: Cut (Ctrl+X)
         * Tap: Copy (Ctrl+C)
         */
        td_cc: tap_dance_cut_copy {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CUTCOPY";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&xcopy LC(X) LC(C)>;
        };

        /* 
         * Enhanced layer-tap behavior
         * Customized layer-tap for better responsiveness
         */
        xlt: goto_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "X_LT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            bindings = <&mo>, <&kp>;
        };

        /* 
         * Simple layer behavior
         * Hold: Send keycode
         * Tap: Switch to layer (not momentary)
         */
        slt: simple_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "S_LT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            bindings = <&kp>, <&to>;
        };

        /* 
         * Ultrawide monitor position 1
         * Custom shortcut for window management
         */
        tdu1: tap_dance_ultrawide_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ULTRAWIDE_1";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp LC(LG(LA(N1)))>;
        };

        /* 
         * Ultrawide monitor position 2
         * Custom shortcut for window management
         */
        tdu2: tap_dance_ultrawide_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ULTRAWIDE_2";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp LC(LG(LA(N2)))>;
        };

        /* 
         * Ultrawide monitor position 3
         * Custom shortcut for window management
         */
        tdu3: tap_dance_ultrawide_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ULTRAWIDE_3";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp LC(LG(LA(N3)))>;
        };

        /* 
         * Ultrawide monitor position 4
         * Custom shortcut for window management
         */
        tdu4: tap_dance_ultrawide_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ULTRAWIDE_4";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp LC(LG(LA(N4)))>;
        };

        /* 
         * Ultrawide monitor position 5
         * Custom shortcut for window management
         */
        tdu5: tap_dance_ultrawide_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ULTRAWIDE_5";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp LC(LG(LA(N5)))>;
        };

        /* 
         * Special quotes behavior
         * Hold: Double quotes with cursor in middle
         * Tap: Single quotes with cursor in middle
         */
        xquotes: special_quotes {
            compatible = "zmk,behavior-hold-tap";
            label = "X_QUOTES";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <50>;
            quick-tap-ms = <120>;
            bindings = <&dquotes>, <&squote>;
        };

        /* 
         * Special brackets behavior
         * Hold: Square brackets with cursor in middle
         * Tap: Parentheses with cursor in middle
         */
        xbrackets: special_brackets {
            compatible = "zmk,behavior-hold-tap";
            label = "X_BRACKETS";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <50>;
            quick-tap-ms = <120>;
            bindings = <&bracket>, <&parenthesis>;
        };

        /* 
         * Brackets tap dance
         * 1 tap: Brackets behavior
         * 2 taps: Curly braces with cursor in middle
         */
        td_brackets: tap_dance_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&xbrackets 0 0>, <&brace>;
        };

        /* 
         * Quotes tap dance
         * 1 tap: Quotes behavior
         * 2 taps: Angle brackets with cursor in middle
         */
        td_quotes: tap_dance_quotes {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QUOTES";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&xquotes 0 0>, <&lessgreaterthan>;
        };

        /* 
         * Special clear behavior
         * Two different clear actions based on hold/tap
         */
        xclear: special_clear {
            compatible = "zmk,behavior-hold-tap";
            label = "X_CLEAR";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <70>;
            quick-tap-ms = <120>;
            bindings = <&clear2>, <&clear>;
        };

        /* 
         * Special home key behavior
         * Hold: Shift+Home (select to beginning)
         * Tap: Home (go to beginning)
         */
        x_home: special_home {
            compatible = "zmk,behavior-hold-tap";
            label = "X_HOME";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <100>;
            quick-tap-ms = <180>;
            bindings = <&kp>, <&kp>;
        };

        /* 
         * Special end key behavior
         * Hold: Shift+End (select to end)
         * Tap: End (go to end)
         */
        x_end: special_end {
            compatible = "zmk,behavior-hold-tap";
            label = "X_END";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <100>;
            quick-tap-ms = <180>;
            bindings = <&kp>, <&kp>;
        };

        /* 
         * iPad left slide behavior
         * Hold: Move slide left
         * Tap: Tile window left
         */
        x_ipl: special_ipad_left {
            compatible = "zmk,behavior-hold-tap";
            label = "X_IPAD_LEFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            bindings = <&ipad_slidemoveleft>, <&ipad_tileleft>;
        };

        /* 
         * iPad right slide behavior
         * Hold: Move slide right
         * Tap: Tile window right
         */
        x_ipr: special_ipad_right {
            compatible = "zmk,behavior-hold-tap";
            label = "X_IPAD_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            quick-tap-ms = <180>;
            bindings = <&ipad_slidemoveright>, <&ipad_tileright>;
        };

        /* 
         * iPad left navigation tap dance
         * 1 tap: Previous app
         * 2 taps: Special iPad left action
         */
        ipad_left: tap_dance_ipad_left {
            compatible = "zmk,behavior-tap-dance";
            label = "ipad_left";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&ipad_prevapp>, <&x_ipl 0 0>;
        };
        
        /* 
         * iPad right navigation tap dance
         * 1 tap: Next app
         * 2 taps: Special iPad right action
         */
        ipad_right: tap_dance_ipad_right {
            compatible = "zmk,behavior-tap-dance";
            label = "ipad_right";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&ipad_nextapp>, <&x_ipr 0 0>;
        };

        /* 
         * iPad slide over tap dance
         * Multiple actions based on tap count:
         * 1 tap: Slide over
         * 2 taps: Next slide window
         * 3 taps: Full screen
         * 4 taps: Replace window
         */
        ipad_slide_over: tap_dance_ipad_slide_over {
            compatible = "zmk,behavior-tap-dance";
            label = "ipad_slide_over";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings =
                <&ipad_slide>,
                <&ipad_slidenextwindow>,
                <&ipad_full>,
                <&ipad_replace>;
        };

        /* 
         * iPad tools tap dance
         * Multiple actions based on tap count for iPad system navigation:
         * 1 tap: Home
         * 2 taps: App switcher
         * 3 taps: Library
         * 4 taps: Control center
         * 5 taps: Siri
         * 6 taps: Dock
         * 7 taps: Spotlight search
         */
        ipad_tools: tap_dance_ipad_tools {
            compatible = "zmk,behavior-tap-dance";
            label = "ipad_tools";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings =
                <&ipad_home>,
                <&ipad_switcher>,
                <&ipad_library>,
                <&ipad_control>,
                <&ipad_siri>,
                <&ipad_dock>,
                <&kp LG(SPACE)>;
        };

        /* 
         * Key sequence tap dance
         * Cycles through T, G, B keys
         */
        td_keys: tap_dance_keys {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_KEYS";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp T>, <&kp G>, <&kp B>;
        };

        /* 
         * Game-specific tap dance
         * Multiple game-related shortcuts based on tap count
         */
        td_game: tap_dance_game {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GAME";
            #binding-cells = <0>;
            tapping-term-ms = <180>;
            bindings = <&kp LA(Z)>, <&kp LA(F1)>, <&kp LA(F9)>, <&kp LS(LA(F1))>, <&kp LA(R)>;
        };
    };

    macros {
        /* 
         * Trademark symbol (™)
         * Uses Alt code to type the trademark symbol
         */
        trademark: trademark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;

            label = "trademark";
        };

        /* 
         * Bullet point (•)
         * Uses Alt code to type a bullet point
         */
        bullet: bullet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N4 &kp KP_N9>,
                <&macro_release>,
                <&kp LALT>;

            label = "bullet";
        };

        /* 
         * Em dash (—)
         * Uses Alt code to type an em dash
         */
        emdash: emdash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N1>,
                <&macro_release>,
                <&kp LALT>;

            label = "emdash";
        };

        /* 
         * Heart symbol (♥)
         * Uses Alt code to type a heart
         */
        heart: heart {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp KP_N3>,
                <&macro_release>,
                <&kp LALT>;

            label = "heart";
        };

        /* 
         * Filter command macro
         * Activates filter menu in applications
         */
        filter: filter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp DOWN &kp E>,
                <&macro_release>,
                <&kp LALT>;

            label = "filter";
        };

        /* 
         * Highlight macro
         * Activates text highlighting in applications
         */
        highlight: highlight {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings = <&kp LALT &kp N7 &kp W &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp DOWN &kp ENTER>;
            label = "highlight";
        };

        /* 
         * Clear macro (method 1)
         * Complex sequence to clear content
         */
        clear: clear {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp R>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_wait_time 200>,
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_wait_time 300>,
                <&macro_press>,
                <&kp LSFT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LSFT>,
                <&macro_tap>,
                <&kp ENTER>,
                <&macro_tap>,
                <&kp ESCAPE>,
                <&macro_tap>,
                <&kp ESCAPE>;
            label = "clear";
        };

        /* 
         * Clear macro (method 2)
         * Alternative sequence to clear content
         */
        clear2: clear2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp R>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_wait_time 200>,
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_wait_time 300>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_tap>,
                <&kp ESCAPE>,
                <&macro_tap>,
                <&kp ESCAPE>;

            label = "clear2";
        };

        /* 
         * Special paste macro
         * Pastes without formatting then selects first item
         */
        spaste: spaste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(V))>, <&macro_wait_time 400>, <&kp LC(N1)>;

            label = "spaste";
        };

        /* 
         * Parentheses macro
         * Types () and places cursor between them
         */
        parenthesis: parenthesis {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "parenthesis";
        };

        /* 
         * Square brackets macro
         * Types [] and places cursor between them
         */
        bracket: bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "bracket";
        };

        /* 
         * Curly braces macro
         * Types {} and places cursor between them
         */
        brace: brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "brace";
        };

        /* 
         * Angle brackets macro
         * Types <> and places cursor between them
         */
        lessgreaterthan: lessgreaterthan {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT>;
            label = "lessgreaterthan";
        };

        /* 
         * Single quotes macro
         * Types '' and places cursor between them
         */
        squote: squote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SINGLE_QUOTE &kp LEFT>;
            label = "squote";
        };

        /* 
         * Double quotes macro
         * Types "" and places cursor between them
         */
        dquotes: dquotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT>;
            label = "dquotes";
        };

        /* 
         * Teams mute macro
         * Left click followed by Ctrl+Shift+M (mute in Teams)
         */
        t_mute: t_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp LC(LS(M))>;
            label = "t_mute";
        };

        /* 
         * iPad home macro
         * Globe+H to go to home screen
         */
        ipad_home: ipad_home {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp H>,
                <&macro_release>,
                <&kp GLOBE>;
            label = "ipad_home";
        };

        /* 
         * iPad dock macro
         * Globe+A to show dock
         */
        ipad_dock: ipad_dock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp A>,
                <&macro_release>,
                <&kp GLOBE>;

            label = "ipad_dock";
        };

        /* 
         * iPad app library macro
         * Shift+Globe+A to open app library
         */
        ipad_library: ipad_library {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT &kp GLOBE>,
                <&macro_tap>,
                <&kp A>,
                <&macro_release>,
                <&kp LSHIFT &kp GLOBE>;

            label = "ipad_library";
        };

        /* 
         * iPad Siri macro
         * Globe+S to activate Siri
         */
        ipad_siri: ipad_siri {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp S>,
                <&macro_release>,
                <&kp GLOBE>;

            label = "ipad_siri";
        };

        /* 
         * iPad control center macro
         * Globe+C to open control center
         */
        ipad_control: ipad_control {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp GLOBE>;

            label = "ipad_control";
        };

        /* 
         * iPad app switcher macro
         * Globe+Up to show app switcher
         */
        ipad_switcher: ipad_switcher {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp UP>,
                <&macro_release>,
                <&kp GLOBE>;

            label = "ipad_switcher";
        };

        /* 
         * iPad next app macro
         * Globe+Right to switch to next app
         */
        ipad_nextapp: ipad_nextapp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp GLOBE>;

            label = "ipad_nextapp";
        };

        /* 
         * iPad previous app macro
         * Globe+Left to switch to previous app
         */
        ipad_prevapp: ipad_prevapp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp GLOBE>;

            label = "ipad_prevapp";
        };

        /* 
         * iPad fullscreen macro
         * Globe+F to toggle fullscreen
         */
        ipad_full: ipad_full {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp F>,
                <&macro_release>,
                <&kp GLOBE>;

            label = "ipad_full";
        };

        /* 
         * iPad tile left macro
         * Ctrl+Globe+Left to tile window to left side
         */
        ipad_tileleft: ipad_tileleft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp GLOBE>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LCTRL &kp GLOBE>;

            label = "ipad_tileleft";
        };

        /* 
         * iPad tile right macro
         * Ctrl+Globe+Right to tile window to right side
         */
        ipad_tileright: ipad_tileright {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp GLOBE>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LCTRL &kp GLOBE>;

            label = "ipad_tileright";
        };

        /* 
         * iPad replace window macro
         * Ctrl+Globe+Down to replace current window
         */
        ipad_replace: ipad_replace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp GLOBE>,
                <&macro_tap>,
                <&kp DOWN>,
                <&macro_release>,
                <&kp LCTRL &kp GLOBE>;

            label = "ipad_replace";
        };

        /* 
         * iPad slide over macro
         * Globe+\ to activate slide over
         */
        ipad_slide: ipad_slide {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp GLOBE>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp GLOBE>;

            label = "ipad_slide";
        };

        /* 
         * iPad slide move left macro
         * Alt+Globe+Left to move slide over window left
         */
        ipad_slidemoveleft: ipad_slidemoveleft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LALT &kp GLOBE>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LALT &kp GLOBE>;

            label = "ipad_slidemoveleft";
        };

        /* 
         * iPad slide move right macro
         * Alt+Globe+Right to move slide over window right
         */
        ipad_slidemoveright: ipad_slidemoveright {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LALT &kp GLOBE>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LALT &kp GLOBE>;

            label = "ipad_slidemoveright";
        };

        /* 
         * iPad slide next window macro
         * Cmd+Globe+\ to cycle to next slide over window
         */
        ipad_slidenextwindow: ipad_slidenextwindow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <30>;
            bindings =
                <&macro_press>,
                <&kp LGUI &kp GLOBE>,
                <&macro_tap>,
                <&kp BSLH>,
                <&macro_release>,
                <&kp LGUI &kp GLOBE>;

            label = "ipad_slidenextwindow";
        };

        /* 
         * Password macro (SEN)
         * Types a specific password sequence
         */
        sen: sen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp R &kp O &kp G &kp E &kp N2 &kp N2 &kp LS(H) &kp RET>;
            label = "SEN";
        };

        /* 
         * Email address macro
         * Types a specific email address
         */
        user: user {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp E &kp A &kp N &kp DOT &kp C &kp H &kp E &kp O &kp W &kp AT &kp R &kp C &kp I &kp DOT &kp R &kp O &kp G &kp E &kp R &kp S &kp DOT &kp C &kp A>;
            label = "user";
        };

        /* 
         * Personal message macro
         * Types a love message to Victoria
         */
        wife: wife {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(I) &kp SPACE &kp L &kp O &kp V &kp E &kp SPACE &kp Y &kp O &kp U &kp SPACE &kp LS(V) &kp I &kp C &kp T &kp O &kp R &kp I &kp A &kp EXCL &kp EXCL &kp EXCL>;
            label = "wife";
        };

        /* 
         * Map document macro
         * Types a specific document URL or path
         */
        mapdoc: mapdoc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp B &kp DOT &kp G &kp Y &kp FSLH &kp X &kp D &kp G &kp V &kp R &kp N9>;
            label = "MAPDOC";
        };

        /* 
         * Estar macro
         * Types a specific sequence for authentication or access
         */
        Estar: Estar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N8 &kp N3 &kp LS(A) &kp LS(A) &kp AMPS &kp Y &kp STAR &kp F>;
            label = "ESTAR";
        };
    };

    combos {
        compatible = "zmk,combos";

        /* 
         * Delete key combo
         * M + / keys pressed together activate Delete
         */
        mdot_DEL {
            bindings = <&kp DELETE>;
            key-positions = <26 28>;
            layers = <0>;
            timeout-ms = <60>;
        };
        
        /* 
         * Left shift sticky key combo
         * . + / keys pressed together activate sticky shift
         */
        punc_LSFT {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <27 28>;
            layers = <0>;
            timeout-ms = <60>;
        };

        /* 
         * Left shift sticky key combo (alternate)
         * X + C keys pressed together activate sticky shift
         */
        xc_LSFT {
            bindings = <&sk LSHIFT>;
            key-positions = <21 22>;
            layers = <0>;
            timeout-ms = <60>;
        };

        /* 
         * Sticky control combo
         * X + C + M + . keys pressed together activate sticky control
         */
        sticky_CTRL {
            bindings = <&sk LCTRL>;
            key-positions = <21 22 27 28>;
            layers = <0>;
            require-prior-idle-ms = <400>;
            timeout-ms = <60>;
        };

        /* 
         * Sticky alt combo
         * Z + / keys pressed together activate sticky alt
         */
        sticky_ALT {
            bindings = <&sk LEFT_ALT>;
            key-positions = <20 29>;
            layers = <0>;
            require-prior-idle-ms = <400>;
            timeout-ms = <60>;
        };

        /* 
         * Underscore/dash combo
         * V + M keys pressed together output underscore on hold, dash on tap
         */
        vm_UNDERSCORE_DASH {
            bindings = <&sdash UNDERSCORE MINUS>;
            key-positions = <23 26>;
            layers = <0>;
            timeout-ms = <60>;
        };

        /* 
         * Left mouse click combo
         * J + K keys pressed together trigger left mouse click
         * Works on layers 0, 1, and 6
         */
        jk_LCLK {
            bindings = <&mkp LCLK>;
            key-positions = <16 17>;
            layers = <0 1 6>;
            require-prior-idle-ms = <200>;
            timeout-ms = <70>;
        };

        /* 
         * Right mouse click combo
         * L + ; keys pressed together trigger right mouse click
         * Works on layers 0, 1, and 6
         */
        ll_RCLK {
            bindings = <&mkp RCLK>;
            key-positions = <19 18>;
            layers = <0 1 6>;
            require-prior-idle-ms = <200>;
            timeout-ms = <70>;
        };

        /* 
         * Middle mouse click combo
         * M + , keys pressed together trigger middle mouse click
         * Works on layers 0, 1, and 6
         */
        mm_MCLK {
            bindings = <&mkp MCLK>;
            key-positions = <26 27>;
            layers = <0 1 6>;
            require-prior-idle-ms = <200>;
            timeout-ms = <60>;
        };

        /* 
         * Task view combo
         * Z + V keys pressed together trigger Ctrl+Alt+Tab
         * Works on layers 0 and 6
         */
        zv_TASKS {
            bindings = <&kp LC(LA(TAB))>;
            key-positions = <20 23>;
            layers = <0 6>;
            require-prior-idle-ms = <200>;
            timeout-ms = <70>;
        };

        /* 
         * Alt+Tab combo
         * X + V keys pressed together trigger Alt+Tab
         * Works on layers 0 and 6
         */
        xv_SWITCH {
            bindings = <&kp LA(TAB)>;
            key-positions = <21 23>;
            layers = <0 6>;
            require-prior-idle-ms = <200>;
            timeout-ms = <70>;
        };

        /* 
         * App launcher combo
         * M + / keys pressed together trigger Alt+Space
         * Works on layers 0 and 6
         */
        mslash_LAUNCHER {
            bindings = <&kp LA(SPACE)>;
            key-positions = <26 29>;
            layers = <0 6>;
            require-prior-idle-ms = <200>;
            timeout-ms = <70>;
        };

        /* 
         * Context menu combo
         * C + V keys pressed together trigger context menu key
         * Works on layers 0 and 6
         */
        cv_MENU {
            bindings = <&kp K_CONTEXT_MENU>;
            key-positions = <22 23>;
            layers = <0 6>;
            require-prior-idle-ms = <200>;
            timeout-ms = <60>;
        };

        /* 
         * Quick clipboard paste combo
         * ; + V keys pressed together trigger Cmd+V
         * Works on layer 0
         */
        quick_clipboard {
            bindings = <&kp LG(V)>;
            key-positions = <19 23>;
            layers = <0>;
            require-prior-idle-ms = <400>;
            timeout-ms = <60>;
        };

        /* 
         * Quick clipboard paste combo (alternate)
         * Q + V keys pressed together trigger Cmd+V
         * Works on layer 0
         */
        quick_clipboard_2 {
            bindings = <&kp LG(V)>;
            key-positions = <10 23>;
            layers = <0>;
            require-prior-idle-ms = <400>;
            timeout-ms = <60>;
        };

        /* 
         * Emoji picker combo
         * Q + / keys pressed together trigger Cmd+.
         * Works on layer 0
         */
        quick_emojis {
            bindings = <&kp LG(DOT)>;
            key-positions = <10 28>;
            layers = <0>;
            require-prior-idle-ms = <400>;
            timeout-ms = <60>;
        };

        /* 
         * Home key combo
         * M + Thumb key pressed together trigger Home/Shift+Home
         * Works on layer 0
         */
        quick_home {
            bindings = <&x_home LS(HOME) HOME>;
            key-positions = <26 34>;
            timeout-ms = <70>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        /* 
         * End key combo
         * / + Thumb key pressed together trigger End/Shift+End
         * Works on layer 0
         */
        quick_end {
            bindings = <&x_end LS(END) END>;
            key-positions = <29 34>;
            timeout-ms = <70>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        /* 
         * Key repeat combo
         * P + Thumb key pressed together trigger key repeat
         * Works on layer 0
         */
        quick_repeat {
             bindings = <&key_repeat>;
             key-positions = <15 34>;
             timeout-ms = <70>;
             require-prior-idle-ms = <200>;
             layers = <0>;
         };

        /* 
         * Left click combo (extra 1)
         * J + Thumb key pressed together trigger left mouse click
         * Works on layer 0
         */
        extra_LCLK {
            bindings = <&mkp LCLK>;
            key-positions = <16 35>;
            layers = <0>;
            timeout-ms = <70>;
            slow-release;
        };

        /* 
         * Left click combo (extra 2)
         * O + Thumb key pressed together trigger left mouse click
         * Works on layer 0
         */
        extra_LCLK_2 {
            bindings = <&mkp LCLK>;
            key-positions = <14 35>;
            layers = <0>;
            timeout-ms = <70>;
            slow-release;
        };

        /* 
         * Left click combo (extra 3)
         * I + Thumb key pressed together trigger left mouse click
         * Works on layer 0
         */
        extra_LCLK_3 {
            bindings = <&mkp LCLK>;
            key-positions = <13 35>;
            layers = <0>;
            slow-release;
        };
        
        /* 
         * Left click combo (extra 4)
         * O + Thumb key pressed together trigger left mouse click
         * Works on layer 0
         */
        extra_LCLK_4 {
            bindings = <&mkp LCLK>;
            key-positions = <14 34>;
            layers = <0>;
            slow-release;
        };

        /* 
         * Right click combo (extra)
         * ; + Thumb key pressed together trigger right mouse click
         * Works on layer 0
         */
        extra_RCLK {
            bindings = <&mkp RCLK>;
            key-positions = <18 35>;
            layers = <0>;
            timeout-ms = <70>;
            slow-release;
        };

        /* 
         * Right click combo (extra 2)
         * Thumb keys pressed together trigger right mouse click
         * Works on layer 0
         */
        extra_RCLK_2 {
            bindings = <&mkp RCLK>;
            key-positions = <30 32>;
            timeout-ms = <70>;
            layers = <0>;
        };

        /* 
         * Mouse button 4 combo
         * P + Thumb key pressed together trigger mouse button 4
         * Works on layer 0
         */
        extra_MB4 {
            bindings = <&mkp MB4>;
            key-positions = <15 35>;
            timeout-ms = <70>;
            layers = <0>;
        };

        /* 
         * Mouse button 5 combo
         * ; + Thumb key pressed together trigger mouse button 5
         * Works on layer 0
         */
        extra_MB5 {
            bindings = <&mkp MB5>;
            key-positions = <19 35>;
            timeout-ms = <70>;
            layers = <0>;
        };

        /* 
         * Quick tab combo
         * K + Thumb key pressed together trigger Ctrl+Tab
         * Works on layer 0
         */
        quick_tab {
            bindings = <&kp LC(TAB)>;
            key-positions = <17 35>;
            timeout-ms = <70>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        /* 
         * Copy combo (extra)
         * E + Thumb key pressed together trigger cut/copy tap dance
         * Works on layer 0
         */
        extra_COPY {
            bindings = <&td_cc>;
            key-positions = <7 34>;
            timeout-ms = <70>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        /* 
         * Copy combo (extra 2)
         * W + Thumb key pressed together trigger cut/copy tap dance
         * Works on layer 0
         */
        extra_COPY_2 {
            bindings = <&td_cc>;
            key-positions = <1 34>;
            timeout-ms = <70>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        /* 
         * Paste combo (extra)
         * R + Thumb key pressed together trigger paste tap dance
         * Works on layer 0
         */
        extra_PASTE {
            bindings = <&td_paste>;
            key-positions = <8 34>;
            timeout-ms = <70>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        /* 
         * Paste combo (extra 2)
         * E + Thumb key pressed together trigger paste tap dance
         * Works on layer 0
         */
        extra_PASTE_2 {
            bindings = <&td_paste>;
            key-positions = <2 34>;
            timeout-ms = <70>;
            require-prior-idle-ms = <200>;
            layers = <0>;
        };

        /* 
         * Easy exit combo
         * Return to default layer from any layer
         * Works on all layers
         */
        easy_exit {
            bindings = <&to 0>;
            key-positions = <31 32>;
            layers = <0 1 2 3 4 5 6 7 8 9>;
        };

        /* 
         * Game sticky layer combo
         * Momentarily activate layer 2 from layer 1
         * Works on layer 1
         */
        game_sticky {
            bindings = <&sl 2>;
            key-positions = <30 32>;
            layers = <1>;
        };

        /* 
         * Game escape combo
         * Trigger escape key in gaming layer
         * Works on layer 1
         */
        game_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <33 23>;
            layers = <1>;
        };

        /* 
         * Game to simple layer combo
         * Switch to simple layer (2) from default or gaming layer
         * Works on layers 0 and 1
         */
        game_to_simple {
            bindings = <&to 2>;
            key-positions = <30 31>;
            layers = <0 1>;
        };

        /* 
         * Game inspect combo
         * Press Y key in gaming layer
         * Works on layer 1
         */
       game_inspect {
            bindings = <&kp Y>;
            key-positions = <20 23>;
            layers = <1>;
            timeout-ms = <60>;
        };

        /* 
         * Game map combo
         * Press M key in gaming layer
         * Works on layer 1
         */
       game_map {
            bindings = <&kp M>;
            key-positions = <20 22>;
            layers = <1>;
            timeout-ms = <60>;
        };

        /* 
         * Simple to game layer combo
         * Switch to gaming layer (1) from simple layer
         * Works on layer 2
         */
        simple_to_game {
            bindings = <&to 1>;
            key-positions = <30 31>;
            layers = <2>;
        };

        /* 
         * Globe key combo
         * Z + X keys pressed together trigger globe tap dance
         * Works on layer 0
         */
        quick_globe {
            bindings = <&td_globe>;
            key-positions = <20 21>;
            require-prior-idle-ms = <400>;
            layers = <0>;
        };

        /* 
         * iPad tools combo
         * Two thumb keys pressed together trigger iPad tools tap dance
         * Works on layer 0
         */
        quick_ipad_tools {
            bindings = <&ipad_tools>;
            key-positions = <32 33>;
            layers = <0>;
        };

        /* 
         * Caps word combo
         * X + . keys pressed together activate caps word
         * Works on layer 0
         */
        mm_CAPSWORD {
            bindings = <&caps_word>;
            key-positions = <21 28>;
            layers = <0>;
            timeout-ms = <70>;
        };

        /* 
         * Caps lock combo
         * C + , keys pressed together toggle caps lock
         * Works on layer 0
         */
        mm_CAPS {
            bindings = <&kp CAPSLOCK>;
            key-positions = <22 27>;
            layers = <0>;
            timeout-ms = <70>;
        };

        /* 
         * Quick layers combo
         * P + Thumb key pressed together momentarily activate layer 9
         * Works on all layers
         */
        quick_layers {
            bindings = <&sl 9>;
            key-positions = <15 37>;
            layers = <0 1 2 3 4 5 6 7 8 9>;
            require-prior-idle-ms = <400>;
            timeout-ms = <70>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        
        /* 
         * Default layer (0)
         * Main typing layer with home row mods
         * ,----------------------------------.                ,----------------------------------.
         * |   Q  |   W  |   E  |   R  |   T  |                |   Y  |   U  |   I  |   O  |   P  |
         * |------+------+------+------+------|                |------+------+------+------+------|
         * |GUI/A |ALT/S |CTL/D |SFT/F |   G  |                |   H  |SFT/J |CTL/K |ALT/L |GUI/' |
         * |------+------+------+------+------|                |------+------+------+------+------|
         * |   Z  |   X  |   C  |   V  |   B  |                |   N  |   M  |SCR/, |SMP/. |FNC/  |
         * `----------------------------------'                `----------------------------------'
         *        |SCR   |SCR   |LCLK  |ESC/3 |SPC/7 |TAB/6|ENT/5|BSPC/4|                  |GLOBE |
         *        `------------------------------------'  `-------------------------------------'
         */
        default_layer {
            label = "HOME";
            bindings = <
&kp Q           &kp W           &kp E        &kp R             &kp T                                &kp Y            &kp U        &kp I         &kp O            &kp P
&mt LEFT_GUI A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G                                &kp H            &mt RSHFT J  &mt RCTRL K   &mt RIGHT_ALT L  &mt RIGHT_GUI SQT
&kp Z           &kp X           &kp C        &kp V             &kp B                                &kp N            &kp M        &xlt 7 COMMA  &xlt 2 DOT       &xlt 8 SLASH
&mo 7           &mo 7           &mkp LCLK    &lt 3 ESCAPE      &lt 7 SPACE  &lt 6 TAB  &lt 5 ENTER  &lt 4 BACKSPACE                                              &td_globe
            >;
        };

        /* 
         * Gaming layer (1)
         * Optimized for gaming with standard WASD layout
         * ,----------------------------------.                ,----------------------------------.
         * |   1  |   Q  |   W  |   E  |   R  |                |   Y  |   U  |   I  |   O  |   P  |
         * |------+------+------+------+------|                |------+------+------+------+------|
         * | SHIFT|   A  |   S  |   D  |   F  |                |   H  |MED/J |   K  |   L  |MED/' |
         * |------+------+------+------+------|                |------+------+------+------+------|
         * |   Z  |   V  |   X  |   C  |   2  |                |   N  |   M  |   ,  |   .  |FNC/  |
         * `----------------------------------'                `----------------------------------'
         *        |TAB   |KEYS  |NUM/J |   3  |SPACE |   4  |ENT/5|BSPC/4|                  |GAME  |
         *        `------------------------------------'  `-------------------------------------'
         */
        gaming_layer {
            bindings = <
&kp N1          &kp Q       &kp W    &kp E         &kp R                                 &kp Y            &kp U  &kp I      &kp O    &kp P
&kp LEFT_SHIFT  &kp A       &kp S    &kp D         &kp F                                 &kp H            &lt 3 J &kp K     &kp L    &lt 3 APOS
&kp Z           &kp V       &kp X    &kp C         &kp N2                                &kp N            &kp M  &kp COMMA  &kp DOT  &lt 8 SLASH
&kp TAB         &td_keys    &xlt 4 J &kp N3        &kp SPACE  &kp N4  &lt 5 ENTER        &lt 4 BACKSPACE                             &td_game
            >;

            label = "GAME";
        };

        /* 
         * Simple layer (2)
         * Basic layout without complex mod-taps for compatibility
         * ,----------------------------------.                ,----------------------------------.
         * |   Q  |   W  |   E  |   R  |   T  |                |   Y  |   U  |   I  |   O  |   P  |
         * |------+------+------+------+------|                |------+------+------+------+------|
         * |   A  |   S  |   D  |   F  |   G  |                |   H  |   J  |   K  |   L  |   '  |
         * |------+------+------+------+------|                |------+------+------+------+------|
         * |   Z  |   X  |   C  |   V  |   B  |                |   N  |   M  |   ,  |   .  |   /  |
         * `----------------------------------'                `----------------------------------'
         *        |SHIFT |GUI   |CTRL  |ESC/3 |SPC/7 |TAB/6|ENT/5|BSPC/4|                  |SHIFT |
         *        `------------------------------------'  `-------------------------------------'
         */
        simple_layer {
            bindings = <
&kp Q           &kp W         &kp E      &kp R       &kp T                            &kp Y            &kp U  &kp I      &kp O    &kp P
&kp A           &kp S         &kp D      &kp F       &kp G                            &kp H            &kp J  &kp K      &kp L    &kp APOS
&kp Z           &kp X         &kp C      &kp V       &kp B                            &kp N            &kp M  &kp COMMA  &kp DOT  &kp FSLH
&kp LEFT_SHIFT  &kp LEFT_GUI  &kp LCTRL  &lt 3 ESC   &lt 7 SPACE  &lt 6 TAB  &lt 5 ENTER  &lt 4 BACKSPACE                         &kp LEFT_SHIFT
            >;

            label = "SIMPLE";
        };

/* 
 * Media layer (3)
 * Media controls and Bluetooth management
 * ,----------------------------------.                ,----------------------------------.
 * |BT CLR|BT CLR|BT CLR|BT CLR|BT CLR|                |      |      |BRI DN|BRI UP|      |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |BT 0  |BT 1  |BT 2  |BT 3  |BT 4  |                |REPEAT|PREV  |VOL DN|VOL UP|NEXT  |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |      |      |      |T MUTE|      |                |      |      |      |      |      |
 * `----------------------------------'                `----------------------------------'
 *        |BOOT  |SLIDE |TOOLS |ESC   |SPACE |TAB   |MUTE  |PLAY  |                  |HOME  |
 *        `------------------------------------'  `-------------------------------------'
 */
media_layer {
    label = "MEDIA";
    bindings = <
&bt BT_DISC 0  &bt BT_DISC 1     &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4                       &trans            &trans          &kp C_BRI_DEC      &kp C_BRI_INC    &trans
&bt BT_SEL 0   &bt BT_SEL 1      &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4                        &key_repeat       &kp C_PREVIOUS  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT
&trans         &trans            &trans         &t_mute        &trans                              &trans            &trans          &trans             &trans           &trans
&bootloader    &ipad_slide_over  &ipad_tools    &kp ESCAPE     &kp SPACE      &kp TAB  &kp C_MUTE  &kp C_PLAY_PAUSE                                                      &to 0
    >;
};

/* 
 * Number layer (4)
 * Number pad and navigation controls
 * ,----------------------------------.                ,----------------------------------.
 * |  [   |  7   |  8   |  9   |  ]   |                |      |KP 7  |KP 8  |KP 9  |  *   |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |  ;   |  4   |  5   |  6   |  =   |                |LAYERS|KP 4  |KP 5  |KP 6  |KP 0  |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |  `   |  1   |  2   |  3   |  \   |                |      |KP 1  |KP 2  |KP 3  |  -   |
 * `----------------------------------'                `----------------------------------'
 *        |ALT   |  /   |SPACE |  .   |  0   |  -   |ENTER|     |                  |BOOT  |
 *        `------------------------------------'  `-------------------------------------'
 */
number_layer {
    label = "NUM";
    bindings = <
&kp LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp RIGHT_BRACKET                           &trans          &kp KP_N7        &kp KP_N8  &kp KP_N9  &kp STAR
&kp SEMICOLON     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL                                   &sl 9           &kp KP_N4        &kp KP_N5  &kp KP_N6  &kp KP_N0
&kp GRAVE         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH                               &trans          &kp KP_N1        &kp KP_N2  &kp KP_N3  &kp MINUS
&kp LEFT_ALT      &kp FSLH      &kp SPACE     &kp DOT       &kp NUMBER_0       &kp MINUS  &kp KP_ENTER  &trans                                                 &bootloader
    >;
};

/* 
 * Symbol layer (5)
 * Special symbols and characters
 * ,----------------------------------.                ,----------------------------------.
 * |  {   |  &   |  *   |  [   |  }   |                |USER  |SEN   |ESTAR |HEART |WIFE  |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |  :   |  $   |  %   |  ^   |  +   |                |HLIGHT|BRCKT |QUOTES|      |      |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |  ~   |  !   |  @   |  #   |  |   |                |CLEAR |EMDASH|TMARK |BULLET|FILTER|
 * `----------------------------------'                `----------------------------------'
 *        |      |IPADL |IPADR |  (   |  )   |  _   |     |     |                  |MAPDOC|
 *        `------------------------------------'  `-------------------------------------'
 */
symbol_layer {
    label = "SYMBOL";
    bindings = <
&kp LEFT_BRACE  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_BRACKET      &kp RIGHT_BRACE                                &user       &sen          &Estar      &heart   &wife
&kp COLON       &kp DOLLAR     &kp PERCENT   &kp CARET             &kp PLUS                                       &highlight  &td_brackets  &td_quotes  &trans   &trans
&kp TILDE       &kp EXCL       &kp AT        &kp HASH              &kp PIPE                                       &xclear 0 0 &emdash       &trademark  &bullet  &filter
&trans          &ipad_left     &ipad_right   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &trans  &trans                                         &mapdoc
    >;
};

/* 
 * Snipe layer (6)
 * Mouse movement precision controls
 * ,----------------------------------.                ,----------------------------------.
 * |M LEFT|M UP  |M DOWN|M RGHT|      |                |PRTSCR|      |COPY  |PASTE |      |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |GUI   |ALT   |CTRL  |SHIFT |LCLK  |                |MB4   |LCLK  |MCLK  |RCLK  |MB5   |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |      |      |      |      |      |                |DEL   |SCRL L|SCRL D|SCRL U|SCRL R|
 * `----------------------------------'                `----------------------------------'
 *        |RCLK  |MCLK  |LCLK  |ESC   |SPACE |     |ENTER|BSPC  |                  |      |
 *        `------------------------------------'  `-------------------------------------'
 */
snipe_layer {
    label = "SNIPE";
    bindings = <
&mmv MOVE_LEFT  &mmv MOVE_UP  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans                           &kp PRINTSCREEN  &trans          &td_cc          &td_paste     &trans
&kp LEFT_GUI    &kp LEFT_ALT  &kp LCTRL       &kp LEFT_SHIFT   &mkp LCLK                        &mkp MB4         &mkp LCLK       &xmclk 7 MCLK   &mkp RCLK     &mkp MB5
&trans          &trans        &trans          &trans           &trans                           &kp DELETE       &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT
&mkp RCLK       &mkp MCLK     &mkp LCLK       &kp ESCAPE       &kp SPACE     &trans  &kp ENTER  &kp BACKSPACE                                                  &trans
    >;
};

/* 
 * Scroll layer (7)
 * Scrolling and navigation controls
 * ,----------------------------------.                ,----------------------------------.
 * |ALT+ES|COPY  |PASTE |SH+A+E|      |                |      |      |COPY  |PASTE |GLOBE |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |GUI   |ALT   |CTRL  |SHIFT |LCLK  |                |REPEAT|LEFT  |DOWN  |UP    |RIGHT |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |UW 1  |UW 2  |UW 3  |UW 4  |UW 5  |                |DEL   |HOME  |PG DN |PG UP |END   |
 * `----------------------------------'                `----------------------------------'
 *        |RCLK  |MCLK  |LCLK  |ESC   |     |TAB   |ENTER|BSPC  |                  |      |
 *        `------------------------------------'  `-------------------------------------'
 */
scroll_layer {
    label = "SCROLL";
    bindings = <
&kp LA(ESC)   &td_cc     &td_paste  &kp LS(LA(ESC))  &trans                      &trans         &trans          &td_cc          &td_paste     &td_globe
&kp LEFT_GUI  &kp LALT   &kp LCTRL  &kp LSHFT        &mkp LCLK                   &key_repeat    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW
&tdu1         &tdu2      &tdu3      &tdu4            &tdu5                       &kp DELETE     &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END
&mkp RCLK     &mkp MCLK  &mkp LCLK  &kp ESC          &trans  &kp TAB  &kp ENTER  &kp BACKSPACE                                                &trans
    >;
};

/* 
 * Function layer (8)
 * Function keys and system controls
 * ,----------------------------------.                ,----------------------------------.
 * |F12   |F7    |F8    |F9    |NUMLK |                |      |      |      |      |      |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |F11   |F4    |F5    |F6    |SCRLK |                |INS   |RSHIFT|RCTRL |RALT  |RGUI  |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |F10   |F1    |F2    |F3    |PAUSE |                |WWW   |MAIL  |MYCOMP|CALC  |      |
 * `----------------------------------'                `----------------------------------'
 *        |BTCLR |OUTTOG|ALT+F4|ESC   |SPACE |TAB   |CAPS |DEL   |                  |CTRL  |
 *        `------------------------------------'  `-------------------------------------'
 */
function_layer {
    bindings = <
&kp F12     &kp F7        &kp F8      &kp F9   &kp KP_NUMLOCK                          &trans        &trans           &trans                &trans         &trans
&kp F11     &kp F4        &kp F5      &kp F6   &kp SCROLLLOCK                          &kp INS       &kp RSHIFT       &kp RCTRL             &kp RIGHT_ALT  &kp RIGHT_GUI
&kp F10     &kp F1        &kp F2      &kp F3   &kp PAUSE_BREAK                         &kp C_AL_WWW  &kp C_AL_MAIL    &kp C_AL_MY_COMPUTER  &kp C_AL_CALC  &trans
&bt BT_CLR  &out OUT_TOG  &kp LA(F4)  &kp ESC  &kp SPACE        &kp TAB  &kp CAPSLOCK  &kp DELETE                                                          &kp C_AL_CONTROL_PANEL
    >;

    label = "FUNCTION";
};

/* 
 * Layers layer (9)
 * Layer switching shortcuts
 * ,----------------------------------.                ,----------------------------------.
 * |      |TO 7  |TO 8  |TO 9  |      |                |      |      |      |      |      |
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |      |TO 4  |TO 5  |TO 6  |      |                |      |SK SFT|SK CTL|SK ALT|SK GUI|
 * |------+------+------+------+------|                |------+------+------+------+------|
 * |      |TO 1  |TO 2  |TO 3  |      |                |      |      |      |      |      |
 * `----------------------------------'                `----------------------------------'
 *        |      |      |      |      |TO 0  |     |     |     |                  |      |
 *        `------------------------------------'  `-------------------------------------'
 */
layers_layer {
    bindings = <
&trans        &to 7       &to 8    &to 9    &trans                          &trans        &trans           &trans              &trans         &trans
&trans        &to 4       &to 5    &to 6    &trans                          &trans        &sk RIGHT_SHIFT  &sk RCTRL           &sk RIGHT_ALT  &sk RIGHT_GUI
&trans        &to 1       &to 2    &to 3    &trans                          &trans        &trans           &trans              &trans         &trans
&trans        &trans      &trans   &trans   &to 0          &trans  &trans   &trans                                                            &trans
    >;

    label = "LAYERS";
};
